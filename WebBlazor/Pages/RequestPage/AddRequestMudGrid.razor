@page "/addRequestMud"
@attribute [Authorize]
@inject IRequestService _requestService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
<h3>Dodaj prośby grafikowe</h3>
   
<MudDatePicker Label="Dzień niedostępności" @bind-Date="Day"></MudDatePicker>

<MudSelect T="string" @bind-Value="@request.Change" Label="Zmiana:" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Pole jest wymagane">
    <MudSelectItem Value=@("Dzień")>Dzień</MudSelectItem>
    <MudSelectItem Value="@("Noc")">Noc</MudSelectItem>
    <MudSelectItem Value="@("Doba")">Cały dzień</MudSelectItem>
</MudSelect>

    <tbody>
<MudSelect T="string" @bind-Value="@request.TypeRequest" Label="Typ prośby:" AnchorOrigin="Origin.BottomCenter" Required="true">
    <MudSelectItem Value=@("Praca")>Praca</MudSelectItem>
    <MudSelectItem Value="@("Wolne")">Wolne</MudSelectItem>
</MudSelect>
</tbody>
<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnButtonClicked">Zapisz</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnButtonClickedBack">Cofnij</MudButton>
    </Authorized>
    <NotAuthorized>
        <p>Dostęp tylko dla zalogowanych.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    RequestModel request = new();
    public string Change { get; set; }
    public string TypeRequest { get; set; }
    public DateTime DayIndisposition { get; set; }
    bool success;

    DateTime? Day = DateTime.Today;


    DateTime? _pickerMonth = DateTime.Now;


    private async void OnButtonClickedBack()
    {
        string state = "";
        bool? result = await DialogService.ShowMessageBox(
            "Anulowanie zmian",
            "Czy na pewno chcesz anulować wprowadzone zmiany?",
            yesText: "TAK-ANULUJ!", cancelText: "COFNIJ");
        state = result == null ? "0" : "1";
        StateHasChanged();
        if (result == true)
        {
            NavigationManager.NavigateTo("/allRequest");
        }
    }

    private async void OnButtonClicked()
    {
        string state = "";
        if (request.TypeRequest != null && request.Change != null){
            bool? result = await DialogService.ShowMessageBox(
                "Dodawanie nowej prośby",
                "Czy na pewno chcesz dodać prośbę?",
                yesText: "TAK-DODAJ!", cancelText: "ANULUJ");
            state = result == null ? "0" : "1";
            StateHasChanged();
            if (result == true)
            {
                await InsertRequest();
                NavigationManager.NavigateTo("/allRequest");
            }}
        else
        {
             await DialogService.ShowMessageBox(
                "Niekompletne dane",
                "Wprowadzone dane nie są kompletne",
                yesText: "OK");
            StateHasChanged();
        }
    }
    private async Task InsertRequest()
    {
        request.DayIndisposition = (Convert.ToDateTime(Day));
        if (Day == null) request.DayIndisposition = DateTime.Now;

        
        await _requestService.AddRequest(request);

    }

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            _pickerMonth = _pickerMonth.Value.AddMonths(-1);
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            _pickerMonth = _pickerMonth.Value.AddMonths(1);
            StateHasChanged();
        }
    }

    
}
