@page "/editRequesttt"
@page "/editRequesttt/{id:int}"
@attribute [Authorize]
@inject IRequestService _requestService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@*

<AuthorizeView>
    <Authorized>
<h3>EditRequest</h3>
<EditForm Model="@result" OnValidSubmit="@OnInitializedAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (request == null)
    {
        <p><em>Loading...</em></p>
    }
    else{
    <br />
    <td>Data: @request.DayIndisposition</td>
    <InputDate id="change" @bind-Value="result.DayIndisposition" required />
    <br />
    <td>Zmiana: @Change</td>
    <label>
            <InputSelect @bind-Value="result.Change" required>
            <option value="D">Dzień</option>
            <option value="N">Noc</option>
            <option value="A">Cały dzień</option>
        </InputSelect>
    </label>
    <td>Typ prośby: @TypeRequest</td>
    <label>
            <InputSelect @bind-Value="result.TypeRequest" required>
            <option value="W">Praca</option>
            <option value="H">Wolne</option>
        </InputSelect>
    </label>
    <br />
    <br />
        <button type="submit" @onclick="RequestEdit">Zatwierdź zmiany</button>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnButtonClicked">Delete</MudButton>
    }
</EditForm>
    </Authorized>
    <NotAuthorized>
        <p>Dostęp tylko dla zalgowanych</p>
    </NotAuthorized>
</AuthorizeView>
*@
@code {

    private async void OnButtonClicked()
    {
        string state="";
        bool? result = await DialogService.ShowMessageBox(
            "Usuwasz obiekt",
            "Czy na pewno chcesz usunąć?",
            yesText: "TAK-USUŃ!", cancelText: "ANULUJ");
        state = result == null ? "0" : "1";
        StateHasChanged();
        if (result == true) {
            await RequestDeleted();
            NavigationManager.NavigateTo("/allRequest");
        }
        
    }

    [Parameter]
    public int Id { get; set; }
    bool Active = true; 

    private string Change { get; set; }
    private string TypeRequest { get; set; }

    RequestModel request = new();
    RequestModel result = new();
    RequestModel deletedRequest = new();


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        request = await _requestService.GetRequestById(Id);
        View();
    }

    private async Task RequestEdit()
    {
        result.Id = Id;
        result.Active = request.Active;
        await _requestService.EditRequest(result);
    }
    private async Task RequestDeleted()
    {
        deletedRequest.Id = Id;
        deletedRequest.Active = false;
        await _requestService.EditRequest(deletedRequest);
    }

  
    private void View()
    {
        if (request.Change == "D") Change = "Dzień";
        else if (request.Change == "N") Change = "Noc";
        else Change = "Cały dzień";

        if (request.TypeRequest == "W") TypeRequest = "Praca";
        else Change = "Wolne";
    }



}

