@page "/"
@inject IAccountService _accountService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider


<h3>LoginPage</h3>
<EditForm Model="@login">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <body>
        <td>Email: </td>
        <InputText id="name" @bind-Value="login.Email" required />
        <br />
        <td>Hasło: </td>
        <InputText id="surname" @bind-Value="login.Password" required />
        <br />
    </body>
</EditForm>
<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="OnButtonClickedLogin">Zaloguj</MudButton>

<MudCard>
    <MudForm Model="@login" ValidationDelay="0">
		<MudCardContent>

            <MudTextField @bind-Value="login.Email"
                          For="@(() => login.Email)"
							  Immediate="true"
							  Label="Email" />

            <MudTextField @bind-Value="login.Password"
                          For="@(() => login.Password)"
							  Immediate="true"
							  Label="Hasło" />

				
        </MudCardContent>
        </MudForm>
         <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="OnButtonClickedLogin" >Zaloguj</MudButton>
    </MudCardActions>
</MudCard>



@code {
    [Inject] ISnackbar Snackbar { get; set; }

    LoginModel login = new LoginModel();
    MudForm form;


    private async void OnButtonClickedLogin()
    {
        if(login.Email == null && login.Password == null)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Logowanie do konta",
                "Wprowadzone dane są błędne.",
                yesText: "OK");
            StateHasChanged();
        }
        else
        {
            var result = await Http.PostAsJsonAsync("api/account/login", login);
            var token = await result.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("token", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
        }
    }


}
