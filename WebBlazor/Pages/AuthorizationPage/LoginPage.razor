@page "/"
@inject IAccountService _accountService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <NotAuthorized>
<p> </p>
<h4>LOGOWANIE</h4>

<MudCard>
    <MudForm Model="@login" ValidationDelay="0">
		<MudCardContent>

            <MudTextField @bind-Value="login.Email"
                          For="@(() => login.Email)"
							  Immediate="true"
							  Label="Email" />

            <MudTextField @bind-Value="login.Password"
                          For="@(() => login.Password)"
							  Immediate="true"
							  Label="Hasło" />
        </MudCardContent>
        </MudForm>
         <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="OnButtonClickedLogin" >Zaloguj</MudButton>
    </MudCardActions>
</MudCard>
</NotAuthorized>
<Authorized>

    </Authorized>
</AuthorizeView>
    

@code {
    LoginModel login = new LoginModel();
    MudForm form;


    private async void OnButtonClickedLogin()
    {
        if(login.Email == null && login.Password == null)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Logowanie do konta",
                "Wprowadzone dane są błędne.",
                yesText: "OK");
            StateHasChanged();
        }
        else
        {
            var result = await Http.PostAsJsonAsync("api/account/login", login);
            //await JS.InvokeVoidAsync("localStorage.setItem", "token", result.ToString());

            NavigationManager.NavigateTo("/allRequest");
        }

    }
}
