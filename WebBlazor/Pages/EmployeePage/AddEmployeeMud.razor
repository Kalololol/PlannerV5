@page "/addEmployeeMud"
@inject IEmployeeService _employeeService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IDialogService DialogService


<h3>Dodawanie nowego pracownika</h3>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" @bind-Value="employee.Name" Label="Imię" Required="true" RequiredError="Pole Imię jest wymagane!" />
                <MudTextField T="string" @bind-Value="employee.Surname" Label=" Nazwisko" Required="true" RequiredError="Pole Nazwisko jest wymagane!" />
                <MudTextField T="string" @bind-Value="employee.AddressEmail" Label=" Adres email" Required="true" RequiredError="Pole Email jest wymagane!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "Adres email jest nieprawidłowy"})" />
                <MudNumericField T="string" @bind-Value="employee.PhoneNumber" Label=" Telefon" Required="true" RequiredError="Pole Telefon jest wymagane i musi składać się z samych cyfr!" />
                <MudTextField T="string" @bind-Value="employee.LicenseNumber" Label=" Prawo wyk. zawodu" Required="true" RequiredError="Pole Prawo wyk. zawodu jest wymagane!" />

                <MudTextField T="string" @bind-Value="employee.Password" Label=" Hasło" HelperText="Wybierz silne hasło" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Wymagane jest hasło!" />
                <MudTextField T="string"
                              Label="Powtórz hasło" HelperText="Powtórz hasło" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
                <div class="d-flex">                    
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="Musisz potwierdzić wprowadzone dane!" Label="Potwierdzam dane" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="(()=> AddEmployee())" Disabled="@(!success)" Class="ml-auto">Zapisz</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Sprwadź wprowadzone dane</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Wyczyść formularz</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Wyczyść błędy</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnButtonClickedBack">Cofnij</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Błędy ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    EmployeeModel employee = new();
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1 = new();
    MudForm form = new();

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Hasło jest wymagane!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Hasło musi mieć długość co najmniej 8 znaków";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Hasło musi zawierać co najmniej jedną wielką literę";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Hasło musi zawierać co najmniej jedną małą literę";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Hasło musi zawierać co najmniej jedną cyfrę";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Wpisane hasła się różnią";
        return null;
    }
    private async Task AddEmployee()
    {
        if (employee.Name == null || employee.Surname == null || employee.LicenseNumber == null || employee.PhoneNumber == null || employee.AddressEmail == null)
        {
            string state = "";
            bool? result = await DialogService.ShowMessageBox(
            "Wprowadzone dane są błędne.",
            "Należy poprawnie wprowadzić wszystkie dane.",
            yesText: "OK!", cancelText: "POWRÓT");
            state = result == null ? "0" : "1";
            StateHasChanged();
            if (result == null) NavigationManager.NavigateTo("/allEmployees");


        }
        else {
                    await _employeeService.AddEmployee(employee);
                    NavigationManager.NavigateTo("/allEmployees");
                }
    }
    void OnButtonClickedBack()
    {
        NavigationManager.NavigateTo("/allEmployees");
    }
}
