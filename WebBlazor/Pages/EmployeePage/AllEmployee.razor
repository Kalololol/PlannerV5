@page "/allEmployees"
@attribute [Authorize]
@inject IEmployeeService _employeeService
@inject NavigationManager NavigationManager


<AuthorizeView>
    <Authorized>
<p>
    <h3>Wszyscy pracownicy</h3> 
</p>
<p>
    @if (employees == null)
    {
        <div>
            <p>Ładowanie.... </p>
        </div>
    }
    else
    {
        <table class="table">
             <thead>
            <tr>
                <th><a class="nav-link">Imię i Nazwisko</a></th>
                <th><a class="nav-link">Prawo wyk. zawodu</a></th>
                <th><a class="nav-link">Telefon</a></th>
            </tr>
             </thead>
                 <tbody>
            @foreach (var e in employees)
            {
                <tr>
                    <td>@e.Name @e.Surname</td>
                    <td>@e.LicenseNumber</td>
                    <td>@e.PhoneNumber</td>
                        <button class="btn btn-primiary"><a href="@($"/detailsEmployee/{e.Id}")"><i class="oi oi-document"></i></a></button>
                        <button class="btn btn-primiary"><a href="@($"/editEmployee/{e.Id}")"><i class="oi oi-pencil"></i></a></button>
                </tr>
            }
            </tbody>
        </table>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnButtonClickedBack">Dodaj nowego pracownika</MudButton>
    }
</p>
    </Authorized>
    <NotAuthorized>
        <p>Dostęp tylko dla zalgowanych</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    List<EmployeeModel> employees = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        employees = await _employeeService.GetEmployees();

    }

    void OnButtonClickedBack()
    {
        NavigationManager.NavigateTo("/addEmployeeMud");
    }
}
